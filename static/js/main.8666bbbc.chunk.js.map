{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","filter","element","Alert","height","alert","role","msg","App","setMode","setAlert","message","setTimeout","aboutText","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8666bbbc.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n//import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/*<Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>*/}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/*<li className=\"nav-item\">\r\n                <Link  className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li>*/}\r\n              \r\n            </ul>\r\n            \r\n              <div className={`form-check form-switch my-2 text-${props.mode==='light'?'dark':'light'}`}>\r\n                <input className=\"form-check-input \" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">Enable{props.mode==='light'?' Dark ':' Light '}mode</label>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes ={\r\n  title:PropTypes.string,\r\n  aboutText:PropTypes.string\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick= ()=>{\r\n        console.log(\"Uppercase was clicked\"+ text);\r\n        let newText=text.toUpperCase();\r\n        setText(newText)\r\n          props.showAlert(\"Converted to UpeerCase\",\"success\");\r\n    }\r\n    const handleLpClick= ()=>{\r\n        console.log(\"Lowercase was clicked\"+ text);\r\n        let newText=text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to LowerCase\",\"success\");\r\n\r\n    }\r\n    const handleClear= ()=>{\r\n       \r\n        let newText='';\r\n        setText(newText)\r\n        props.showAlert(\"Text Cleared\",\"success\");\r\n\r\n    }\r\n    const handleCopy= ()=>{\r\n       \r\n       var text =document.getElementById(\"myBox\");\r\n       text.select();\r\n       navigator.clipboard.writeText(text.value);\r\n       props.showAlert(\"Text Cpoied\",\"success\");\r\n\r\n    }\r\n    const handleExtraSpaces= ()=>{\r\n       \r\n        let newText =text.split(/[ ]+/)\r\n        setText(newText.join(\" \"))\r\n        \r\n \r\n     }\r\n    const handleOnChange= (event)=>{\r\n        console.log(\"On change\");\r\n        setText(event.target.value)\r\n      \r\n\r\n    }\r\n    const [text,setText] =useState('');\r\n    return (\r\n        <>\r\n        <div className=\"container \"  style={{color:props.mode ==='dark'?'white':'black'}}> \r\n            <h2>{props.heading}</h2>\r\n            <div className=\"mb-2\">\r\n            <textarea className=\"form-control\"  value = {text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'gray':'white',color:props.mode ==='dark'?'grey':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} type=\"button\" className=\"btn btn-outline-success mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button disabled={text.length===0} type=\"button\" className=\"btn btn-outline-success mx-1 my-1\" onClick={handleLpClick}>Convert to Lowercase</button>\r\n            <button disabled={text.length===0} type=\"button\" className=\"btn btn-outline-success mx-1 my-1\" onClick={handleClear}>Clear</button>\r\n            <button disabled={text.length===0} type=\"button\" className=\"btn btn-outline-success mx-1 my-1\" onClick={handleCopy}>CopyText</button>\r\n            <button disabled={text.length===0} type=\"button\" className=\"btn btn-outline-success mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-2\" style={{color:props.mode ==='dark'?'white':'black'}}>\r\n            <h3>Your text Summry</h3>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters </p>\r\n            <h4>Preview</h4>\r\n            <p>{text}</p>\r\n\r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        <div style={{ height:'50px'}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{props.alert.type}</strong>  :{props.alert.msg}\r\n        \r\n        </div>}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n{/*import {\n  BrowserRouter as Router,\n  Switch,\n  Route\n \n} from \"react-router-dom\";\n*/}\n\nfunction App() {\n  const [mode,setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n\n  const showAlert =(message,type)=>{\n       setAlert({\n         msg:message,\n         type:type\n       })\n       setTimeout(()=>{\n         setAlert(null);\n       },2000);\n  }\n  \n  const toggleMode =()=>{\n    if(mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor='grey';\n      showAlert(\"Dark mode has been Enabled\",\"success\");\n     \n    }else{\n      setMode('light')\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has been Enabled\",\"success\");\n      \n    }\n  }\n  return (\n    <>\n    {/*<Router>*/}\n    <Navbar title=\"TextTransform\" aboutText=\"AboutUs\" mode={mode} toggleMode={toggleMode}  />\n    <Alert alert={alert}/>\n     <div className=\"container my-3  \">\n   {/* <Switch>\n          <Route  exact path=\"/about\">\n            <About mode={mode}/>\n          </Route>\n          \n          <Route exact path=\"/\">*/}\n          <TextForm heading=\"TextTransform -Word Counter,Character Counter,Uppercase to Lowercase, Lowercase to Uppercase\"  showAlert={showAlert} />\n     {/*       \n          </Route>\n     </Switch>*/}\n\n     \n     \n     </div>\n     {/*</Router>*/}\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}